<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.vip.integral.dao.AttackParamMapper" >
  <resultMap id="BaseResultMap" type="com.vip.integral.model.AttackParam" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="nodeid" property="nodeid" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="belong" property="belong" jdbcType="VARCHAR" />
    <result column="request_method" property="requestMethod" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="charset" property="charset" jdbcType="VARCHAR" />
    <result column="action" property="action" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="DATE" />
    <result column="update_time" property="updateTime" jdbcType="DATE" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.vip.integral.model.AttackParam" extends="BaseResultMap" >
    <result column="data" property="data" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, nodeid, account, belong, request_method, status, charset, action, create_time, 
    update_time
  </sql>
  <sql id="Blob_Column_List" >
    data
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_attack_param
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.vip.integral.model.AttackParam" >
    insert into t_attack_param (id, nodeid, account, 
      belong, request_method, status, 
      charset, action, create_time, 
      update_time, data)
    values (#{id,jdbcType=INTEGER}, #{nodeid,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, 
      #{belong,jdbcType=VARCHAR}, #{requestMethod,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{charset,jdbcType=VARCHAR}, #{action,jdbcType=VARCHAR}, #{createTime,jdbcType=DATE}, 
      #{updateTime,jdbcType=DATE}, #{data,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.vip.integral.model.AttackParam" >
    insert into t_attack_param
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="nodeid != null" >
        nodeid,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="belong != null" >
        belong,
      </if>
      <if test="requestMethod != null" >
        request_method,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="charset != null" >
        charset,
      </if>
      <if test="action != null" >
        action,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="data != null" >
        data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="nodeid != null" >
        #{nodeid,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="belong != null" >
        #{belong,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null" >
        #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="charset != null" >
        #{charset,jdbcType=VARCHAR},
      </if>
      <if test="action != null" >
        #{action,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=DATE},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=DATE},
      </if>
      <if test="data != null" >
        #{data,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.vip.integral.model.AttackParam" >
    update t_attack_param
    <set >
      <if test="nodeid != null" >
        nodeid = #{nodeid,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="belong != null" >
        belong = #{belong,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null" >
        request_method = #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="charset != null" >
        charset = #{charset,jdbcType=VARCHAR},
      </if>
      <if test="action != null" >
        action = #{action,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=DATE},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=DATE},
      </if>
      <if test="data != null" >
        data = #{data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.vip.integral.model.AttackParam" >
    update t_attack_param
    set nodeid = #{nodeid,jdbcType=INTEGER},
      account = #{account,jdbcType=VARCHAR},
      belong = #{belong,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      charset = #{charset,jdbcType=VARCHAR},
      action = #{action,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE},
      update_time = #{updateTime,jdbcType=DATE},
      data = #{data,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.vip.integral.model.AttackParam" >
    update t_attack_param
    set nodeid = #{nodeid,jdbcType=INTEGER},
      account = #{account,jdbcType=VARCHAR},
      belong = #{belong,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      charset = #{charset,jdbcType=VARCHAR},
      action = #{action,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE},
      update_time = #{updateTime,jdbcType=DATE}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--根据所属源获取攻击者参数-->
  <select id="listByBelong" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where belong = #{belong,jdbcType=VARCHAR}
  </select>
  <!-- 根据节点id获取攻击者 -->
  <select id="getByNode" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where nodeid = #{nodeid,jdbcType=INTEGER}
  </select>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.operational.platform.dbservice.dao.AttackParamMapper" >
  <resultMap id="BaseResultMap" type="com.operational.platform.dbservice.model.AttackParam" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="nodeid" property="nodeid" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="belong" property="belong" jdbcType="VARCHAR" />
    <result column="request_method" property="requestMethod" jdbcType="VARCHAR" />
    <result column="header" property="header" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="charset" property="charset" jdbcType="VARCHAR" />
    <result column="action" property="action" jdbcType="VARCHAR" />
    <result column="action_type" property="actionType" jdbcType="VARCHAR" />
    <result column="attr" property="attr" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.operational.platform.dbservice.model.AttackParamWithBLOBs" extends="BaseResultMap" >
    <result column="data" property="data" jdbcType="LONGVARCHAR" />
    <result column="cookies" property="cookies" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, nodeid, account, belong, request_method, header, status, charset, action, action_type,
    attr, create_time, update_time
  </sql>
  <sql id="Blob_Column_List" >
    data, cookies
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.operational.platform.dbservice.model.AttackParamExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.operational.platform.dbservice.model.AttackParamExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_attack_param
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_attack_param
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.operational.platform.dbservice.model.AttackParamExample" >
    delete from t_attack_param
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.operational.platform.dbservice.model.AttackParamWithBLOBs" >
    <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
      SELECT LAST_INSERT_ID() AS id
    </selectKey>
    insert into t_attack_param (id, nodeid, account,
    belong, request_method, header,
    status, charset, action,
    action_type, attr, create_time,
    update_time, data, cookies
    )
    values (#{id,jdbcType=INTEGER}, #{nodeid,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
    #{belong,jdbcType=VARCHAR}, #{requestMethod,jdbcType=VARCHAR}, #{header,jdbcType=VARCHAR},
    #{status,jdbcType=INTEGER}, #{charset,jdbcType=VARCHAR}, #{action,jdbcType=VARCHAR},
    #{actionType,jdbcType=VARCHAR}, #{attr,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
    #{updateTime,jdbcType=TIMESTAMP}, #{data,jdbcType=LONGVARCHAR}, #{cookies,jdbcType=LONGVARCHAR}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.operational.platform.dbservice.model.AttackParamWithBLOBs" >
    insert into t_attack_param
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="nodeid != null" >
        nodeid,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="belong != null" >
        belong,
      </if>
      <if test="requestMethod != null" >
        request_method,
      </if>
      <if test="header != null" >
        header,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="charset != null" >
        charset,
      </if>
      <if test="action != null" >
        action,
      </if>
      <if test="actionType != null" >
        action_type,
      </if>
      <if test="attr != null" >
        attr,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="data != null" >
        data,
      </if>
      <if test="cookies != null" >
        cookies,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="nodeid != null" >
        #{nodeid,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="belong != null" >
        #{belong,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null" >
        #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="header != null" >
        #{header,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="charset != null" >
        #{charset,jdbcType=VARCHAR},
      </if>
      <if test="action != null" >
        #{action,jdbcType=VARCHAR},
      </if>
      <if test="actionType != null" >
        #{actionType,jdbcType=VARCHAR},
      </if>
      <if test="attr != null" >
        #{attr,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="data != null" >
        #{data,jdbcType=LONGVARCHAR},
      </if>
      <if test="cookies != null" >
        #{cookies,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.operational.platform.dbservice.model.AttackParamExample" resultType="java.lang.Integer" >
    select count(*) from t_attack_param
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_attack_param
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nodeid != null" >
        nodeid = #{record.nodeid,jdbcType=INTEGER},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.belong != null" >
        belong = #{record.belong,jdbcType=VARCHAR},
      </if>
      <if test="record.requestMethod != null" >
        request_method = #{record.requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.header != null" >
        header = #{record.header,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.charset != null" >
        charset = #{record.charset,jdbcType=VARCHAR},
      </if>
      <if test="record.action != null" >
        action = #{record.action,jdbcType=VARCHAR},
      </if>
      <if test="record.actionType != null" >
        action_type = #{record.actionType,jdbcType=VARCHAR},
      </if>
      <if test="record.attr != null" >
        attr = #{record.attr,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.data != null" >
        data = #{record.data,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cookies != null" >
        cookies = #{record.cookies,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update t_attack_param
    set id = #{record.id,jdbcType=INTEGER},
    nodeid = #{record.nodeid,jdbcType=INTEGER},
    account = #{record.account,jdbcType=VARCHAR},
    belong = #{record.belong,jdbcType=VARCHAR},
    request_method = #{record.requestMethod,jdbcType=VARCHAR},
    header = #{record.header,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=INTEGER},
    charset = #{record.charset,jdbcType=VARCHAR},
    action = #{record.action,jdbcType=VARCHAR},
    action_type = #{record.actionType,jdbcType=VARCHAR},
    attr = #{record.attr,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    update_time = #{record.updateTime,jdbcType=TIMESTAMP},
    data = #{record.data,jdbcType=LONGVARCHAR},
    cookies = #{record.cookies,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_attack_param
    set id = #{record.id,jdbcType=INTEGER},
    nodeid = #{record.nodeid,jdbcType=INTEGER},
    account = #{record.account,jdbcType=VARCHAR},
    belong = #{record.belong,jdbcType=VARCHAR},
    request_method = #{record.requestMethod,jdbcType=VARCHAR},
    header = #{record.header,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=INTEGER},
    charset = #{record.charset,jdbcType=VARCHAR},
    action = #{record.action,jdbcType=VARCHAR},
    action_type = #{record.actionType,jdbcType=VARCHAR},
    attr = #{record.attr,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.operational.platform.dbservice.model.AttackParamWithBLOBs" >
    update t_attack_param
    <set >
      <if test="nodeid != null" >
        nodeid = #{nodeid,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="belong != null" >
        belong = #{belong,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null" >
        request_method = #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="header != null" >
        header = #{header,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="charset != null" >
        charset = #{charset,jdbcType=VARCHAR},
      </if>
      <if test="action != null" >
        action = #{action,jdbcType=VARCHAR},
      </if>
      <if test="actionType != null" >
        action_type = #{actionType,jdbcType=VARCHAR},
      </if>
      <if test="attr != null" >
        attr = #{attr,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="data != null" >
        data = #{data,jdbcType=LONGVARCHAR},
      </if>
      <if test="cookies != null" >
        cookies = #{cookies,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.operational.platform.dbservice.model.AttackParamWithBLOBs" >
    update t_attack_param
    set nodeid = #{nodeid,jdbcType=INTEGER},
    account = #{account,jdbcType=VARCHAR},
    belong = #{belong,jdbcType=VARCHAR},
    request_method = #{requestMethod,jdbcType=VARCHAR},
    header = #{header,jdbcType=VARCHAR},
    status = #{status,jdbcType=INTEGER},
    charset = #{charset,jdbcType=VARCHAR},
    action = #{action,jdbcType=VARCHAR},
    action_type = #{actionType,jdbcType=VARCHAR},
    attr = #{attr,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    update_time = #{updateTime,jdbcType=TIMESTAMP},
    data = #{data,jdbcType=LONGVARCHAR},
    cookies = #{cookies,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.operational.platform.dbservice.model.AttackParam" >
    update t_attack_param
    set nodeid = #{nodeid,jdbcType=INTEGER},
    account = #{account,jdbcType=VARCHAR},
    belong = #{belong,jdbcType=VARCHAR},
    request_method = #{requestMethod,jdbcType=VARCHAR},
    header = #{header,jdbcType=VARCHAR},
    status = #{status,jdbcType=INTEGER},
    charset = #{charset,jdbcType=VARCHAR},
    action = #{action,jdbcType=VARCHAR},
    action_type = #{actionType,jdbcType=VARCHAR},
    attr = #{attr,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--根据所属源获取攻击者参数-->
  <select id="listByBelong" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where belong = #{belong,jdbcType=VARCHAR} and status = 1
  </select>
  <!-- 根据节点id获取攻击者 -->
  <select id="getByNode" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_attack_param
    where nodeid = #{nodeid,jdbcType=INTEGER}
  </select>
</mapper>